# -*- coding: utf-8 -*-
"""LAB03_TASNIA_2018260133.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qodZq6foYQSQuLsXgWs4QZWIkhcQXr_I

**Pandas**
"""

import pandas as pd

"""**Pandas Series**"""

obj = pd.Series([4, 7, -5, 3])
obj=[obj%2==0]

"""Filtering Data:"""

obj [obj % 2 == 0]

"""Scalar Operations:"""

obj+5
obj * 2

"""Creating Series from a Dictionary"""

sdata = {'Ohio':35000, 'Texas':71000, 'Oregon':16000, 'Utah':5000}
obj3 = pd.Series(sdata)
print(obj3)

"""**Pandas DataFrame**

Constructing Pandas DataFrame:

1.*From* *List*
"""

list1 = [['Alice',23,3.5,10], ['Bob',24,3.4,6], ['Charlie',22,3.9,8]]
df = pd.DataFrame(list1)
df.columns = ['Name','Age','CGPA','HoursStudied']
print(df.head())

"""*2. From Dictionary*"""

dict1 = {'id':[1,2,3],'name':['Alice','Bob','Charlie'],'age':[20,25,32]}
df1 = pd.DataFrame(dict1)
print(df1)

"""*3. From CSV File*"""

df2 = pd.read_csv('sample_data_1.csv', header = None)
df2.columns=['id','state','population','murder_rate']
print(df2)

df2.head()
df2.tail()
df2.count()

"""**Select, Add, Delete, Rename Indices, Rows or Columns of/from a DataFrame**

*Selecting the first cell*
"""

print(df1.iloc[0][0])
print(df1.loc[0]['name'])

"""*Selecting a few columns*"""

df3=df[['Name','CGPA']]
print(df3)

"""*Selecting a few rows and columns*"""

df4 = df1.loc[1:2]
print(df4)
df5 = df1.iloc[1:3]
print(df5)

"""*Appending two dataframes*"""

list1 = [['Alice',23,3.5,10],['Bob',24,3.4,6],['Charlie',22,3.9,8]]
df = pd.DataFrame(list1)
df.columns = ['name','age','cgpa','hoursStudied']

list2 = [['Don',21,2.5,2],['Elton',25,2.75,4]]
df11 = pd.DataFrame(list2)
df11.columns = ['name','age','cgpa','hoursStudied']

df12 = df.append(df11, ignore_index=True)
print(df12)

"""*Deleting rows/columns from a dataframe*"""

df12.drop([0,1], inplace=True)
df12.drop(['cgpa'], axis=1, inplace=True)

"""*Renaming columns*"""

new_cols = ['n','a','hs']
df12.columns=new_cols
print(df12)

"""**Data Filtering, Sorting**"""

cgpa_greater_than_three_point_five1 = df[df['cgpa'] > 3.5]
cgpa_greater_than_three_point_five2 = df.loc[df['cgpa'] > 3.5]
cgpa_greater_than_three_point_five3 = df.query('cgpa > 3.5')

print(cgpa_greater_than_three_point_five1)
print(cgpa_greater_than_three_point_five2)
print(cgpa_greater_than_three_point_five3)

df.sort_values(by='age',ascending=False)

"""**Visualization**"""

df.boxplot(column=['cgpa','hoursStudied'])

df.hist(column= ['cgpa'], bins=5)

df['hoursStudied'].value_counts().plot(kind = 'bar')

df['cgpa'].value_counts().plot(kind = 'pie')

df.plot.scatter(x='cgpa',y='hoursStudied')